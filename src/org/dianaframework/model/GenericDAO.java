package org.dianaframework.model;

import java.sql.SQLException;
import java.util.Collection;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.criterion.Expression;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.dao.DataAccessException;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.Criteria;
import org.springframework.orm.hibernate3.HibernateCallback;

/**
 *
 * Spring DAO Support implementation for Usuario.
 * Generated by Diana Framework. DO NOT EDIT!!!
 *
 */
public class GenericDAO extends HibernateDaoSupport {
private String domainClass;

    public Collection getAll() {
        return getHibernateTemplate().find("from "+getDomainClass()+" as o");
    }
    
    public Collection query(final String consulta) {
        return (Collection)getHibernateTemplate().find(consulta);
    }
    
    public Collection querySQL(final String consulta) {
        try {
            return querySQL(consulta, Class.forName(getDomainClass()));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public Collection querySQL(final String consulta, Class clazz) {
        SQLQuery qry = getSession().createSQLQuery(consulta).addEntity(clazz);
        return (Collection)qry.list();
    }
    
    public SQLQuery getHibernateQuerySQL(final String consulta) {
        return getSession().createSQLQuery(consulta);
    }
    
    public Object get(final int id) {
        try {
            //return getHibernateTemplate().get(Class.forName(domainClass), new Integer(id));            
            return getSession().get(Class.forName(domainClass), new Integer(id));            
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public Object get(final long id) {
        try {
            return getHibernateTemplate().load(Class.forName(domainClass), new Long(id));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public Object get(final Integer id) {
        try {
            return getHibernateTemplate().load(Class.forName(domainClass), id);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public Object get(final Long id) {
        try {
            return getHibernateTemplate().load(Class.forName(domainClass), id);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public void deleteAll() {
        getHibernateTemplate().delete("from "+getDomainClass()+" as o");
    }
    
    public void delete(final int id) {
        try {
            getHibernateTemplate().delete(getHibernateTemplate().load(Class.forName(domainClass), new Integer(id)));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void delete(final long id) {
        try {
            getHibernateTemplate().delete(getHibernateTemplate().load(Class.forName(domainClass), new Long(id)));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void delete(final Integer id) {
        try {
            getHibernateTemplate().delete(getHibernateTemplate().load(Class.forName(domainClass), id));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void delete(final Long id) {
        try {
            getHibernateTemplate().delete(getHibernateTemplate().load(Class.forName(domainClass), id));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void delete(final Object objeto) {
        getHibernateTemplate().delete(objeto);
    }
    
    public void delete(final String consulta) {
        getHibernateTemplate().delete(consulta);
    }

    public void save(final Object objeto) {
        getHibernateTemplate().save(objeto);
    }
    
    public void update(final Object objeto) {
        getHibernateTemplate().update(objeto);
    }
    
    public void setORMReference(Object mp) {}
    
    public Collection getByCriteria(DetachedCriteria detachedCriteria) throws DataAccessException {
    	return getHibernateTemplate().findByCriteria(detachedCriteria);
    }

    public Object getFirstIndexByCriteria(DetachedCriteria detachedCriteria) throws DataAccessException {
        return getHibernateTemplate().findByCriteria(detachedCriteria).get(0);
    }

    public final DetachedCriteria getDetachedCriteria() throws DataAccessException {
    	return DetachedCriteria.forEntityName(getDomainClass());
    }
    
    public Object getUniqueResultCriteria(final String field, final Integer value) throws DataAccessException {
        return (Object) this.getHibernateTemplate().execute(
                new HibernateCallback() {
            public Object doInHibernate(Session session)
            throws HibernateException, SQLException {
                Criteria criteria = session.createCriteria(getDomainClass())
                .add(Expression.eq(field, value));
                return criteria.uniqueResult();
            }
        });
    }

    public String getDomainClass() {
        return domainClass;
    }

    public void setDomainClass(String domainClass) {
        this.domainClass = domainClass;
    }
    
}